# -*- coding: utf-8 -*-
"""rekomendasi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1us7Bqb2IWjcvquO1hYZO9DoJKLpkDISy
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split

df = pd.read_csv("https://raw.githubusercontent.com/MuhammadYusufAndrika/tripskuy-capstone/refs/heads/main/tourism_linkl.csv")
df.head()

#encode/mengubah category dan city untuk inputan agar mudah di proses
le_category = LabelEncoder()
le_city = LabelEncoder()
df['category_encoded'] = le_category.fit_transform(df['name_category'])
df['city_encoded'] = le_city.fit_transform(df['name_city'])

#fitur prediksi / inputan
X = df[['category_encoded', 'price_place', 'city_encoded']]
#target prediksi
y = df['id_place']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#scaler sebagai alat yang akan melakukan standardisasi.
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#convert data ke tensorflow
X_train_tf = tf.convert_to_tensor(X_train_scaled, dtype=tf.float32)
y_train_tf = tf.convert_to_tensor(y_train.values, dtype=tf.float32)
X_test_tf = tf.convert_to_tensor(X_test_scaled, dtype=tf.float32)
y_test_tf = tf.convert_to_tensor(y_test.values, dtype=tf.float32)

#create model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(3,)),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(16, activation='relu'),
    tf.keras.layers.Dense(1)
])

model.compile(
    #menggunakan optimizer adam
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
    loss='mse',
    metrics=['mae']
)

# mencegah overfitting
early_stopping = tf.keras.callbacks.EarlyStopping(
    monitor='val_loss',
    patience=10,
    restore_best_weights=True
)

model.fit(
    X_train_tf,
    y_train_tf,
    epochs=100,
    batch_size=32,
    validation_split=0.2,
    callbacks=[early_stopping],
    verbose=0
)

"""Available Categories:
['Taman Hiburan' 'Budaya' 'Cagar Alam' 'Bahari' 'Pusat Perbelanjaan'
 'Tempat Ibadah']


Available Cities:
['Jakarta Utara' 'Jakarta Pusat' 'Jakarta Selatan' 'Jakarta Barat'
 'Jakarta Timur' 'Kepulauan Seribu' 'Yogyakarta' 'Bandung' 'Semarang'
 'Surabaya']
"""

df.columns

df.url_image

def main():
    while True:
        print("\n=== Tourism Destination Recommendations ===")

        # Display and validate category input
        print("\nAvailable Categories:")
        categories = df['name_category'].unique()
        print(categories)
        while True:
            category = input("Enter Tourism Category: ")
            if category in categories:
                break
            print("Invalid category. Please choose from the available options.")

        # Display and validate city input
        print("\nAvailable Cities:")
        cities = df['name_city'].unique()
        print(cities)
        while True:
            city = input("Enter Destination City: ")
            if city in cities:
                break
            print("Invalid city. Please choose from the available options.")

        # Validate price input
        while True:
            try:
                price = float(input("Enter Price (Rp): "))
                break
            except ValueError:
                print("Please enter a valid number for price!")

        # Prepare input for ML model
        category_encoded = le_category.transform([category])[0]
        city_encoded = le_city.transform([city])[0]
        input_data = scaler.transform([[category_encoded, price, city_encoded]])
        input_tensor = tf.convert_to_tensor(input_data, dtype=tf.float32)

        # Predict rating
        predicted_rating = float(model.predict(input_tensor, verbose=0)[0][0])
        print(f"\nPredicted Overall Rating: {predicted_rating:.2f}")

        # Filter destinations
        filtered_df = df[
            (df['name_category'] == category) &
            (df['name_city'] == city)
        ]

        if filtered_df.empty:
            print("No destinations match the criteria.")
            continue

        # Calculate price difference and get top recommendations
        filtered_df['price_diff'] = abs(filtered_df['price_place'] - price)
        recommendations = filtered_df.nsmallest(5, 'price_diff')[
            ['name_place', 'price_place', 'rating_place', 'desc_place', 'url_image']
        ].reset_index(drop=True)

        # Display recommendations with detailed information
        print("\n=== Top Recommended Destinations ===")
        for idx, row in recommendations.iterrows():
            print(f"\n{idx+1}. {row['name_place']}")
            print(f"   Price: Rp {row['price_place']:,.0f}")
            print(f"   Rating: {row['rating_place']:.2f}")
            print(f"   Description: {row['desc_place']}")
            print(f"   Image URL: {row['url_image']}")

        # Continue or exit prompt
        if input("\nWant to search for more recommendations? (y/n): ").lower() != 'y':
            break

if __name__ == "__main__":
    main()

# prompt: buatkan code untuk save model nya

import os

# Save the model
model.save('tourism_recommendation_model.keras') # Add .keras extension to the filename

# Check if the model directory exists, if not create one
model_directory = 'tourism_recommendation_model'
if not os.path.exists(model_directory):
    os.makedirs(model_directory)

# Save the label encoders and scaler
import joblib
joblib.dump(le_category, os.path.join(model_directory, 'le_category.pkl'))
joblib.dump(le_city, os.path.join(model_directory, 'le_city.pkl'))
joblib.dump(scaler, os.path.join(model_directory, 'scaler.pkl'))